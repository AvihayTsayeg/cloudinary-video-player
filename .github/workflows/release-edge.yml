name: ðŸŒ± Release Edge

on:
  push:
    branches:
      - 'edge'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - run: npm ci

      - name: Get releases
        id: fetch-latest-release
        uses: ./.github/actions/fetch-latest-release
        with:
          github_token: ${{ github.token }}

      - name: Calculate edge version
        id: calculate-edge-version
        uses: ./.github/actions/calculate-edge-version
        with:
          version: ${{ steps.fetch-latest-release.outputs.tag_name }}

      - run: echo "Next version will be ${{ steps.calculate-edge-version.outputs.next-edge }}"

      - name: Release PR
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          release-as: ${{ steps.calculate-edge-version.outputs.next-edge }}

      # The logic below handles the npm publication:
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
        if: ${{ steps.release.outputs.release_created }}
        # these if statements ensure that a publication only occurs when
        # a new release is created:
      - run: npm run build-all
        if: ${{ steps.release.outputs.release_created }}
      - run: npm publish --tag edge
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        if: ${{ steps.release.outputs.release_created }}

  notify:
    runs-on: ubuntu-latest
    needs: ['release']
    if: always() && needs.release.steps.release.outputs.release_created
    steps:
      - name: Slack Notification - Deployment Success
        if: needs.release.result == 'success'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ vars.FE_DEPLOYMENTS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'rnd-fe-releases'
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 'Video Player ${{ needs.release.steps.release.outputs.tag_name }} Deployed'
          SLACK_MESSAGE: 'Success :rocket: cloudinary-video-player version ${{ needs.release.steps.release.outputs.tag_name }} deployed successfully'
          SLACK_FOOTER: 'Check it out at https://cloudinary.github.io/cloudinary-video-player/?ver=edge&min=true'

      - name: Slack Notification - Deployment Failure
        if: needs.release.result == 'failure'
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ vars.FE_DEPLOYMENTS_SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'rnd-fe-releases'
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 'Video Player Deployment Failed'
          SLACK_MESSAGE: ':alert: Failed to deploy cloudinary-video-player version ${{ needs.release.steps.release.outputs.tag_name }}'
