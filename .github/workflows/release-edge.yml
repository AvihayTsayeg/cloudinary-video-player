name: Release Edge ðŸš€

on:
  push:
    branches:
      - 'edge'

jobs:
  release-edge:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: "call action"
        id: last_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: "Print result"
        run: |
          echo "id: ${{ steps.last_release.outputs.id }}"
          echo "name: ${{ steps.last_release.outputs.name }}"
          echo "tag_name: ${{ steps.last_release.outputs.tag_name }}"
          echo "created_at: ${{ steps.last_release.outputs.created_at }}"
          echo "draft: ${{ steps.last_release.outputs.draft }}"
          echo "prerelease: ${{ steps.last_release.outputs.prerelease }}"

      - name: Calculate edge version
        id: calculate-edge-version
        uses: ./.github/actions/calculate-edge-version
        with:
          version: ${{ steps.last_release.outputs.tag_name }}

      - run: echo ${{ steps.calculate-edge-version.outputs.next-edge }}

      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          release-as: ${{ steps.calculate-edge-version.outputs.next-edge }}

      # The logic below handles the npm publication:
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
        if: ${{ steps.release.outputs.release_created }}
        # these if statements ensure that a publication only occurs when
        # a new release is created:
      - run: npm ci
        if: ${{ steps.release.outputs.release_created }}
      - run: npm run build-all
        if: ${{ steps.release.outputs.release_created }}
      - run: npm publish --tag edge
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        if: ${{ steps.release.outputs.release_created }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: ['release']
  #   if: always() && needs.release.result == 'success'
  #   steps:
  #     - name: Slack Notification - Deployment Success
  #       uses: rtCamp/action-slack-notify@v2.2.0
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #         SLACK_CHANNEL: 'widgets-releases'
  #         SLACK_COLOR: ${{ job.status }}
  #         SLACK_TITLE: 'Deployment succeeded'
  #         SLACK_MESSAGE: 'Success :rocket: cloudinary-video-player version ${{ github.event.inputs.package_version }} deployed successfully'
